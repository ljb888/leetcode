44. Wildcard Matching
Hard

799

58

Favorite

Share
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like ? or *.
Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input:
s = "aa"
p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input:
s = "cb"
p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
Example 4:

Input:
s = "adceb"
p = "*a*b"
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring "dce".
Example 5:

Input:
s = "acdcb"
p = "a*c?b"
Output: false



class Solution {
public:
    bool isMatch(string s, string p) {
        pIdx = 0;
        lastStar = p.size();

        for (size_t i=0; i<s.size(); ++i)
        {
            if (! match(p, s, i)) return false;
        }

        // consume all the *
        while ((pIdx < p.size()) && (p[pIdx] == '*')) ++pIdx;

        if (pIdx < p.size()) return false; // we did not match everything

        return true;
    }

private:
    bool match(const string& p, const string& s, size_t i)
    {
        //cout << "match for " << s[i] << endl;
        if (pIdx >= p.size())
        {
            return rollback(p, s, i);
        }
        switch (p[pIdx])
        {
            case '*':
                // consume all '*'
                do {
                    lastStar = pIdx;
                    ++pIdx;
                } while (pIdx < p.size() && (p[pIdx] == '*'));

                if (pIdx < p.size() && match(p[pIdx], s[i]))
                {
                    ++pIdx;
                    return true;
                }
                return rollback(p, s, i);

            default:
                if (pIdx < p.size() && match(p[pIdx], s[i]))
                {
                    ++pIdx;
                    return true;
                }
                return rollback(p, s, i);
        }
    }

    bool match (char pc, char c2)
    {
        return (pc == c2) || (pc == '?');
    }

    bool rollback(const string& p, const string& s, size_t pos)
    {
        //cout << "rollback: " << lastStar << "   pIdx: " << pIdx << endl;
        if (lastStar >= p.size()) return false;

        --pIdx;

        // first find c between lastStar and pIdx
        // p[pIdx] != c
        while (pIdx > lastStar)
        {
            while (pIdx > lastStar && (! match(p[pIdx], s[pos]))) --pIdx;

            // found c @ pIdx;
            bool found = true;
            for (size_t i=1; pIdx > lastStar + i; ++i)
            {
                //cout << p[pIdx-i] << "  " << s[pos - i] << endl;
                if (! match(p[pIdx - i], s[pos - i]))
                {
                    --pIdx;
                    found = false;
                    break;
                }
            }
            if (found) break;
        }

        // now we matched, move on because p[pIdx] now match c, let us move on
        ++pIdx;
        return true;
    }

private:
    size_t lastStar;
    size_t pIdx;
};
