47. Permutations II
Medium

740

38

Favorite

Share
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]



class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> result;
        if (nums.empty()) return result;
        
        //sort(nums.begin(), nums.end());
        
        for (const auto& n: nums) {
            auto temp = move(result);
            if (temp.empty()) result.push_back(vector<int>{n});
            else {
                for_each(temp.begin(), temp.end(), [&result, &n](const auto& v) {
                    for (size_t i=0; i<=v.size(); ++i) {
                        vector<int> one_result;
                        copy(v.begin(), v.begin()+i, back_inserter(one_result));
                        one_result.push_back(n);
                        copy(v.begin()+i, v.end(), back_inserter(one_result));
                        
                        result.push_back(one_result);
                        
                        // this is how to make it uniqure
                        if (i < v.size() && (v[i] == n)) break;
                    }
                });
            }
        }
    #if 0
        sort(result.begin(), result.end(), [](const auto& t1, const auto& t2) {
            return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());
        });
    #endif
        
        
        return result;
    }
};
