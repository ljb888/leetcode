105. Construct Binary Tree from Preorder and Inorder Traversal
Medium

1300

37

Favorite

Share
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        assert(preorder.size() == inorder.size());
        TreeNode *root = nullptr, *res = nullptr;
        std::stack<TreeNode *> st;
        int iidx = 0;
        for (int n : preorder) {
            st.emplace(new TreeNode(n));
            if (!res) res = st.top();
            if (root && !root->right) {
                root->right = st.top();
            }
            while (!st.empty() && st.top()->val == inorder[iidx]) {
                root = st.top();
                st.pop();
                if (!st.empty() && !st.top()->left) {
                    st.top()->left = root;
                }
                ++iidx;
            }
        }
        return res;
    }
};
